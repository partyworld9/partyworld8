import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.utils.media_group import MediaGroupBuilder

BOT_TOKEN = 'BOT_TOKEN'
MANAGER_ID = manager_user_id

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

class Registration(StatesGroup):
    choosing_tariff = State()
    choosing_date = State()
    choosing_location = State()
    choosing_phone = State()

def make_keyboard(with_cancel=False):
    builder = ReplyKeyboardBuilder()
    if with_cancel:
        builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
        builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reg –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ "
        "–∏–ª–∏ /tariffs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏."
    )

@dp.message(Command("cancel"))
@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
@dp.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Command("reg"))
async def cmd_reg(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="Standart"))
    builder.add(types.KeyboardButton(text="Plus"))
    builder.add(types.KeyboardButton(text="VIP"))
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    builder.adjust(1, 2)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(Registration.choosing_tariff)

@dp.message(Registration.choosing_tariff)
async def tariff_chosen(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
        
    if message.text not in ["Standart", "Plus", "VIP"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return
    
    await state.update_data(tariff=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü:",
        reply_markup=make_keyboard(with_cancel=True)
    )
    await state.set_state(Registration.choosing_date)

@dp.message(Registration.choosing_date)
async def date_chosen(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    
    await state.update_data(date=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:",
        reply_markup=make_keyboard(with_cancel=True)
    )
    await state.set_state(Registration.choosing_location)

@dp.message(Registration.choosing_location)
async def location_chosen(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    
    await state.update_data(location=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=make_keyboard(with_cancel=True)
    )
    await state.set_state(Registration.choosing_phone)

@dp.message(Registration.choosing_phone)
async def phone_chosen(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cmd_cancel(message, state)
        return
    
    await state.update_data(phone=message.text)
    user_data = await state.get_data()
    
    user_link = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>"
    
    msg = (
        "‚ú® <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> ‚ú®\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} (@{message.from_user.username})\n"
        f"üìä –¢–∞—Ä–∏—Ñ: {user_data['tariff']}\n"
        f"üìÖ –î–∞—Ç–∞: {user_data['date']}\n"
        f"üìç –ú–µ—Å—Ç–æ: {user_data['location']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}"
    )
    
    await bot.send_message(
        MANAGER_ID,
        msg,
        parse_mode="HTML"
    )
    
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

@dp.message(Command("tariffs"))
async def cmd_galery(message: types.Message):

    # Standart
    standart_builder = MediaGroupBuilder(
        caption="üì¶ Standart\nüíµ 350 —Å–æ–º–æ–Ω–∏\n\nüß∏ 1 –∞–Ω–∏–º–∞—Ç–æ—Ä\n‚è±Ô∏è 30 –º–∏–Ω—É—Ç\nüé≠ –ú–∏–Ω–∏-—Å—Ü–µ–Ω–∫–∞"
    )
    standart_builder.add_photo(media="AgACAgIAAxkBAAMZaBxKvRsEwdcPQvHUG0_2PzHkBEcAApHsMRsHS-lI3jDpKXyp-a8BAAMCAANzAAM2BA")
        
    # PLUS
    plus_builder = MediaGroupBuilder(
        caption="‚ú® Plus\nüíµ 650 —Å–æ–º–æ–Ω–∏\n\nüß∏ 2 –∞–Ω–∏–º–∞—Ç–æ—Ä–∞\n‚è∞ 1 —á–∞—Å\nüéâ –ò–≥—Ä—ã –∏ —à–æ—É"
    )
    plus_builder.add_photo(media="AgACAgIAAxkBAAMbaBxKvVkfCTnedRUM4FtgyWB7VwgAApDsMRsHS-lI5bISFeTjoOUBAAMCAANzAAM2BA")

    # VIP
    vip_builder = MediaGroupBuilder(
        caption="üëë VIP\nüíµ 1000 —Å–æ–º–æ–Ω–∏\n\nüß∏ 3 –∞–Ω–∏–º–∞—Ç–æ—Ä–∞\n‚è≥ 2 —á–∞—Å–∞\nüé¨ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
    )
    vip_builder.add_photo(media="AgACAgIAAxkBAAMaaBxKvSyWBtcItA9KJUDsCF6a-KcAApLsMRsHS-lILR4DmSwdXooBAAMCAANzAAM2BA")

    await message.answer_media_group(
        media=standart_builder.build()
    )
    await message.answer_media_group(
        media=plus_builder.build()
    )
    await message.answer_media_group(
        media=vip_builder.build()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
